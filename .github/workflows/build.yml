name: Build

on:
  push:
    tags: ["v*"]
  workflow_call:
  workflow_dispatch:

permissions:
  contents: write

env:
  PROGRAM_NAME: trigger-message
  REPO: lee-orr/spin-message-trigger
  PKG_CONFIG_SYSROOT_DIR: /
  PKG_CONFIG_ALLOW_CROSS: 1

jobs:
  build:
    name: Build plugin
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { target: "x86_64-unknown-linux-gnu", os: "ubuntu-latest", arch: "amd64", extension: "" }
          # TODO: the cross-compile to Linux aarch64 fails with a pkg-config error that
          # I don't yet know how to resolve
          - { target: "aarch64-unknown-linux-gnu", os: "ubuntu-latest", arch: "aarch64", extension: "" }
          - { target: "x86_64-apple-darwin", os: "macos-latest", arch: "amd64", extension: "" }
          - { target: "aarch64-apple-darwin", os: "macos-latest", arch: "aarch64", extension: "" }
          - { target: "x86_64-pc-windows-msvc", os: "windows-latest", arch: "amd64", extension: ".exe" }
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.config.target }}
      - name: Install Targets
        run: rustup target install wasm32-unknown-unknown && rustup target install wasm32-wasi
      - name: Setup SSL dev for ARM
        if: matrix.config.target == 'aarch64-unknown-linux-gnu'
        run: |
          apt update
          apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          echo '[target.aarch64-unknown-linux-gnu]' >> ${HOME}/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ${HOME}/.cargo/config.toml

          # openssl
          wget https://www.openssl.org/source/openssl-1.1.1e.tar.gz
          tar zxf openssl-1.1.1e.tar.gz
          
          # a toolchain I know is working
          wget "https://developer.arm.com/-/media/Files/downloads/gnu-a/9.2-2019.12/binrel/gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu.tar.xz?revision=61c3be5d-5175-4db6-9030-b565aae9f766&la=en&hash=0A37024B42028A9616F56A51C2D20755C5EBBCD7" -O gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu.tar.xz
          mkdir -p /opt/arm/9
          tar Jxf gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu.tar.xz -C /opt/arm/9
          
          # building
          cd openssl-1.1.1e
          ./Configure linux-aarch64 --cross-compile-prefix=/opt/arm/9/gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu- --prefix=/opt/openssl-1.1.1e --openssldir=/opt/openssl-1.1.1e -static
          make install
      - name: Install Spin
        uses: rajatjindal/setup-actions/spin@main
        with:
          version: "v0.10.1"
      - name: Install pluginify
        shell: bash
        run: spin plugins install --url https://github.com/itowlson/spin-pluginify/releases/download/canary/pluginify.json --yes

      - name: set the release version - commit
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_SHA}"
      - name: set the release version (tag)
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - name: set the release version (main)
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: echo "RELEASE_VERSION=canary" >> $GITHUB_ENV
      - name: set the release version (TEST TEST TEST)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "RELEASE_VERSION=precanary" >> $GITHUB_ENV
      
      - name: Set Version in Pluginify File
        uses: bluwy/substitute-string-action@v2.0.1
        with:
          _input-file: ./spin-pluginify.toml
          "0.0.1": ${{ env.RELEASE_VERSION }}
          
      - name: Build plugin binary
        run: cargo build --release --target ${{ matrix.config.target }} -p ${{ env.PROGRAM_NAME}}
      - name: Copy plugin binary to standard location
        shell: bash
        run: cp target/${{ matrix.config.target }}/release/${{ env.PROGRAM_NAME}}${{ matrix.config.extension }} target/release/${{ env.PROGRAM_NAME}}${{ matrix.config.extension }}

      - name: Pluginify plugin binary
        run: spin pluginify --arch ${{ matrix.config.arch }}
      - name: Archive pluginified
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PROGRAM_NAME}}-${{ matrix.config.os }}-${{ matrix.config.arch }}
          path: |
            *.tar.gz
            *.json
  package:
    name: Package plugin
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install Spin
        uses: rajatjindal/setup-actions/spin@main
        with:
          version: "v0.10.1"
      - name: Install pluginify
        shell: bash
        run: spin plugins install --url https://github.com/itowlson/spin-pluginify/releases/download/canary/pluginify.json --yes

      - name: set the release version (tag)
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - name: set the release version (main)
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: echo "RELEASE_VERSION=canary" >> $GITHUB_ENV
      - name: set the release version (TEST TEST TEST)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "RELEASE_VERSION=precanary" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v3
      - name: Display structure of downloaded files
        run: ls -R
      - name: pluginify it
        run: |
          spin pluginify --merge --release-url-base https://github.com/${{env.REPO}}/releases/download/${{ env.RELEASE_VERSION }}/ >${{ env.PROGRAM_NAME }}.json
      - name: Display merged manifest
        run: cat ${{ env.PROGRAM_NAME }}.json

      # Handle versioned release
      - name: Upload tars to Github release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "**/*.tar.gz"
          file_glob: true
          tag: ${{ github.ref }}
      - name: Upload manifest to Github release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.PROGRAM_NAME }}.json
          tag: ${{ github.ref }}

      # Handle canary release
      - name: Delete canary tag
        if: github.ref == 'refs/heads/main'
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: canary
      - name: Recreate canary tag and release
        if: github.ref == 'refs/heads/main'
        uses: ncipollo/release-action@v1.10.0
        with:
          tag: canary
          allowUpdates: true
          prerelease: true
      - name: Upload tars to Github release
        if: github.ref == 'refs/heads/main'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "**/*.tar.gz"
          file_glob: true
          tag: canary
      - name: Upload manifest to Github release
        if: github.ref == 'refs/heads/main'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.PROGRAM_NAME }}.json
          tag: canary
